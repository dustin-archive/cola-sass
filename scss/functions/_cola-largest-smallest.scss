@function cola-largest-smallest($type, $list) {
  $result: null;

  @for $i from 1 through length($list) {
    $value: nth($list, $i);

    @if type-of($value) == list {
      $nest: cola-largest-smallest($type, $value);
      $value: map-get($nest, value);
      $i: join($i, map-get($nest, index)); // cola-join?
    }

    @if $result == null
        or $type == 'largest' and $value > map-get($result, value)
        or $type == 'smallest' and $value < map-get($result, value) {
      $result: (value: $value, index: $i);
    }
    @else if $value == map-get($result, value) {
      $tie: (index: map-get($result, index) $i);
      $result: map-merge($result, $tie);
    }
  }

  @return $result;
}

@function cola-largest($list, $key: null) {
  @return cola-null-map-get(cola-largest-smallest('largest', $list), $key);
}

@function cola-smallest($list, $key: null) {
  @return cola-null-map-get(cola-largest-smallest('smallest', $list), $key);
}

// problem:
// + you can't tell a difference between multiple indexes and a single nested index
//
// + could give them commas - like coordinates
// + i'd prefer colons but those aren't allowed in SCSS
//
// + maybe it could be a string??
//   (value: 2345, index: '3:2:2')
// + it's obviously a list though... but there's no way to force ()'s
// + i'd then have to have a function to process these strings and convert them to numbers
//
// + could have a seperate item in the map for nested indexes??
//   + this could also solve the problem of optional root-level only stuff?
//     + i can't do this for all functions though

// (value: 2345, index: 3 2 2)
// (value: 2345, index: (3 2 2) 7)
// (value: -2, index: 1 4)
// @debug cola-largest( (55 54 3 2 32) 31 (345 (435 2345)) 345 (42 4 45) 34 );
// @debug cola-largest( (55 54 3 2 32) 31 (345 (435 2345)) 345 (42 4 45) 34 2345 );
// @debug cola-largest( (-55 -54 -3 -2 -32) -31 (-345 (-435 -2345)) -345 (-42 -4 -45) -34 );

// (value: 2, index: 1 4)
// (value: 2, index: (1 4) 7)
// (value: -2345, index: 3 2 2)
// @debug cola-smallest( (55 54 3 2 32) 31 (345 (435 2345)) 345 (42 4 45) 34 );
// @debug cola-smallest( (55 54 3 2 32) 31 (345 (435 2345)) 345 (42 4 45) 34 2 );
// @debug cola-smallest( (-55 -54 -3 -2 -32) -31 (-345 (-435 -2345)) -345 (-42 -4 -45) -34 );

// 300
// 3
// @debug cola-largest(100 200 300, value);
// @debug cola-largest(100 200 300, index);

// 100
// 1
// @debug cola-smallest(100 200 300, value);
// @debug cola-smallest(100 200 300, index);
